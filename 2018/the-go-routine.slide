The Go Routine

Por qué lo elegimos, cómo lo usamos y el día a día con Go 
Mayo 2018

Luis Gabriel Gómez - Mercadolibre

* 

.image ./resources/gowork.jpg _ 900

* Links

*Esta* *presentación* -> [[https://tinyurl.com/ybhetpr8][https://tinyurl.com/ybhetpr8]] 
.image ./resources/qr.jpg _ 375

Nuevo o curioso en Go?

*Golang* *Basics* -> [[https://goo.gl/nC6lyn][https://goo.gl/nC6lyn]] 

* Índice

- Por qué Go?
- Go vs Java/Grails
- To Go or not to Go
- Tooling e IDEs
- Un día de trabajo
- Resultados

* Intro - En retrospectiva

- 8 años de Go 
- 3 años en MeLi
- Actualmente sirviendo millones de req/min (y en aumento!)


Cómo llegamos? Hacia dónde vamos?

* Intro - En perspectiva

No está de más hacer la comparativa entre la edad de Go y la de algunas de las otras tecnologías que usan o han usado en MeLi: 

- Python: 27 años
- PHP: 23 años 
- Java: 22 años
- Grails: 12 años
- NodeJS: 8 años

* Por qué Go?

Blogposts y forobardos en la web sobre el tema sobran...
.image ./resources/gohangman.jpg _ 450
La intención de esta presentación es mostrar por qué nos ha servido a nosotros en MeLi

* Por qué Go? - En MeLi

- Performance
- Curva de aprendizaje
- Simpleza

* Por qué Go? - Performance

- Excelente concurrencia nativa y de bajo costo con goroutines (green threads)
- Garbage collector concurrente, pausas negligibles en APIs
- Compilación rápida, linkeo estático por defecto (y dynlink a partir de 1.5)
- Uso de memoria mínimo comparado con alternativas managed
- Punteros + slices nativos
- Para los valientes: Interoperabilidad nativa con C

* Por qué Go? - Curva de aprendizaje

- Extensa documentación disponible
- Poca dependencia en frameworks y plataformas de terceros
- Soporte de testing nativo

* Por qué Go? - Simpleza

- Lenguaje de reducida superficie sintáctica
- Linkeo estático = no DLL hell
- Poco cambalache objetoso gracias a duck typing
- El compilador ayuda, las referencias sin uso se consideran errores

* Por qué Go? - Bonus track: Comunidad

Actualmente posee una gran comunidad de usuarios, en muchos casos empresas y startups que enriquecen el creciente ecosistema aportando implementaciones open source

*Go* *en* *producción* -> [[https://github.com/golang/go/wiki/GoUsers][Link]]

*Testimonios* -> [[https://github.com/golang/go/wiki/SuccessStories][Link]]

* Go vs Grails - Infra

Un gran diferencial en proceso de desarrollo y deploy es el requerimiento de infraestructura por parte de cada plataforma
.image ./resources/versus.png _ 1000

* Go vs Grails - Infra: Consideraciones y trade-offs

- Tiempos de build y test
- Dependencias de ambiente (container y dev)
- Instrumentación versus overhead aplicativo
- Configurabilidad versus simpleza

*Hard* *mode*: Pipeline Setup & CI -> deploy 100% automático y aplicable a _N_ instancias

* Go vs Grails

Dicho esto, podemos hacer una comparación básica de la infra aplicativa promedio utilizada por una API en Grails y Go. Los diseños de servicios no necesariamente deben coincidir

* Go vs Grails - Infra: Java

.image ./resources/infra_java.png _ 650

* Go vs Grails - Infra: Grails

.image ./resources/infra_grails.png _ 580

* Go vs Grails - Infra: Go

.image ./resources/infra_go.png _ 550

* Go vs Grails - Juegos mentales: Grails stacktrace

Un stacktrace vale más que mil printf. Veamos qué hace cada API

	at sun.misc.Unsafe.park(Unsafe.java:-1)
	at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)
	at java.util.concurrent.FutureTask.awaitDone(FutureTask.java:425)
	at java.util.concurrent.FutureTask.get(FutureTask.java:187)
	at java_util_concurrent_Future$get.call(Unknown Source:-1)
	at meliapi.commands.ApiCommand.get(ApiCommand.groovy:28)
	at meliapi.commands.ApiCommand$get.call(Unknown Source:-1)
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:45)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:108)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:112)
	at meliapi.core.steps.BusinessRulesService.iterateRule(BusinessRulesService.groovy:62)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-1)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:90)
	at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:233)
	at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1086)
	at groovy.lang.ExpandoMetaClass.invokeMethod(ExpandoMetaClass.java:1110)
	at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:910)
	at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1031)
	at groovy.lang.ExpandoMetaClass.invokeMethod(ExpandoMetaClass.java:1110)

* 

Esto se va a poner feo

	at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:910)
	at org.codehaus.groovy.runtime.callsite.PogoMetaClassSite.callCurrent(PogoMetaClassSite.java:66)
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:49)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:133)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:153)
	at meliapi.core.steps.BusinessRulesService$_iterateRules_closure8.doCall(BusinessRulesService.groovy:115)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-1)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:90)
	at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:233)
	at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1086)
	at groovy.lang.ExpandoMetaClass.invokeMethod(ExpandoMetaClass.java:1110)
	at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:910)
	at groovy.lang.Closure.call(Closure.java:411)
	at groovy.lang.Closure.call(Closure.java:427)
	at org.codehaus.groovy.runtime.DefaultGroovyMethods.collect(DefaultGroovyMethods.java:2202)
	at org.codehaus.groovy.runtime.DefaultGroovyMethods.collect(DefaultGroovyMethods.java:2172)
	at org.codehaus.groovy.runtime.dgm$60.invoke(Unknown Source:-1)

* 

Bien, parece que ya tenemos algo de lógica de negocio
(ejercicio para el lector: encontrarla)

	at org.codehaus.groovy.runtime.callsite.PojoMetaMethodSite$PojoMetaMethodSiteNoUnwrapNoCoerce.invoke(PojoMetaMethodSite.java:271)
	at org.codehaus.groovy.runtime.callsite.PojoMetaMethodSite.call(PojoMetaMethodSite.java:53)
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:45)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:108)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:116)
	at meliapi.core.steps.BusinessRulesService.iterateRules(BusinessRulesService.groovy:109)
	at meliapi.core.steps.BusinessRulesService$iterateRules.callCurrent(Unknown Source:-1)
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:49)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:133)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:153)
	at meliapi.core.steps.BusinessRulesService.iterateOptions(BusinessRulesService.groovy:139)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-1)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:90)
	at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:233)
	at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1086)
	at groovy.lang.ExpandoMetaClass.invokeMethod(ExpandoMetaClass.java:1110)
	at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:910)

* 

Algo más de magia sintáctica con una pizca de servicio de negocio

	at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1031)
	at groovy.lang.ExpandoMetaClass.invokeMethod(ExpandoMetaClass.java:1110)
	at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:910)
	at org.codehaus.groovy.runtime.callsite.PogoMetaClassSite.callCurrent(PogoMetaClassSite.java:66)
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:49)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:133)
	at meliapi.core.steps.BusinessRulesService$_closure2.doCall(BusinessRulesService.groovy:28)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-1)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:90)
	at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:233)
	at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1086)
	at groovy.lang.ExpandoMetaClass.invokeMethod(ExpandoMetaClass.java:1110)
	at groovy.lang.MetaClassImpl.invokePropertyOrMissing(MetaClassImpl.java:1125)
	at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1088)
	at groovy.lang.ExpandoMetaClass.invokeMethod(ExpandoMetaClass.java:1110)
	at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:910)
	at org.codehaus.groovy.runtime.callsite.PojoMetaClassSite.call(PojoMetaClassSite.java:44)

* 

Como podemos apreciar, la devirtualización es 100% (o 99%...?) hecha de forma aplicativa (gracias Groovy)

	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:45)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:108)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:120)
	at meliapi.BusinessService.getCartOptionsMap(BusinessService.groovy:221)
	at meliapi.BusinessService$getCartOptionsMap$6.callCurrent(Unknown Source:-1)
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:49)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:133)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:145)
	at meliapi.BusinessService.getCartShipmentData(BusinessService.groovy:97)
	at meliapi.BusinessService$getCartShipmentData.call(Unknown Source:-1)
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:45)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:108)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:120)
	at meliapi.BusinessLogicService$_closure3.doCall(BusinessLogicService.groovy:40)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-1)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:272)
	at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.call(PogoMetaMethodSite.java:64)

* 

Genial, ya logramos ver el controller de esta API 

	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:45)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:108)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:120)
	at meliapi.BusinessLogicService.getCartData(BusinessLogicService.groovy:146)
	at meliapi.BusinessLogicService.getCartData(BusinessLogicService.groovy:-1)
	at meliapi.BusinessLogicService$getCartData.call(Unknown Source:-1)
	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:45)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:108)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:120)
	at meliapi.BusinessController.getCart(BusinessController.groovy:30)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-1)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.codehaus.groovy.grails.web.servlet.mvc.MixedGrailsControllerHelper.invoke(MixedGrailsControllerHelper.java:154)
	at org.codehaus.groovy.grails.web.servlet.mvc.AbstractGrailsControllerHelper.handleAction(AbstractGrailsControllerHelper.java:354)
	at org.codehaus.groovy.grails.web.servlet.mvc.AbstractGrailsControllerHelper.executeAction(AbstractGrailsControllerHelper.java:231)
	at org.codehaus.groovy.grails.web.servlet.mvc.AbstractGrailsControllerHelper.handleURI(AbstractGrailsControllerHelper.java:197)
	at org.codehaus.groovy.grails.web.servlet.mvc.AbstractGrailsControllerHelper.handleURI(AbstractGrailsControllerHelper.java:121)
	at org.codehaus.groovy.grails.web.servlet.mvc.SimpleGrailsController.handleRequest(SimpleGrailsController.java:72)

* 

Según un estudio de la universidad Queen Mary, las cabras tienen acentos individuales

	at org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter.handle(SimpleControllerHandlerAdapter.java:48)
	at org.codehaus.groovy.grails.web.servlet.GrailsDispatcherServlet.doDispatch(GrailsDispatcherServlet.java:355)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:851)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:953)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:855)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:646)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:829)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:727)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:303)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:100)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:100)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:100)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:748)

* 

Les presento a una amiga: Catalina (alias Tomcat)

	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:486)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:411)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:338)
	at org.codehaus.groovy.grails.web.util.WebUtils.forwardRequestForUrlMappingInfo(WebUtils.java:332)
	at org.codehaus.groovy.grails.web.util.WebUtils.forwardRequestForUrlMappingInfo(WebUtils.java:297)
	at org.codehaus.groovy.grails.web.util.WebUtils.forwardRequestForUrlMappingInfo(WebUtils.java:288)
	at org.codehaus.groovy.grails.web.mapping.filter.UrlMappingsFilter.doFilterInternal(UrlMappingsFilter.java:217)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:106)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)
	at org.codehaus.groovy.grails.web.sitemesh.GrailsPageFilter.executeFilterChainWithWrappedResponse(GrailsPageFilter.java:233)
	at org.codehaus.groovy.grails.web.sitemesh.GrailsPageFilter.obtainContent(GrailsPageFilter.java:208)
	at org.codehaus.groovy.grails.web.sitemesh.GrailsPageFilter.doFilter(GrailsPageFilter.java:153)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)
	at org.codehaus.groovy.grails.web.servlet.mvc.GrailsWebRequestFilter.doFilterInternal(GrailsWebRequestFilter.java:69)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:106)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)
	at org.codehaus.groovy.grails.web.filters.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:67)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:106)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:106)

* 

Y llegamos al final. No se me ocurren más comentarios

	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:343)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:260)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)
	at com.meli.businessFilter.Public2PrivateFilter.doFilter(Public2PrivateFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)
	at com.jsonp.filters.JsonpFilter.doFilter(JsonpFilter.java:71)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:220)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:122)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:170)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:98)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:116)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:408)
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1040)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:607)
	at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:313)
	- locked <0x529b> (a org.apache.tomcat.util.net.SocketWrapper)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:745)

* Go vs Java - Go stacktrace

	runtime/debug.Stack(0xc420172500, 0xc42010a400, 0x0)
	/usr/local/go/src/runtime/debug/stack.go:24 +0xa7
	repo.com/mercadolibre/meli-api/src/api/vendor/repo.com/mercadolibre/go-meli-toolkit/restful/rest.(*RequestBuilder).doRequest(0xc420172500, 0x17aa8eb, 0x3, 0xc42089a120, 0x51, 0x0, 0x0, 0xc4201ce780)
	/Users/lgomez/go/src/repo.com/mercadolibre/meli-api/src/api/vendor/repo.com/mercadolibre/go-meli-toolkit/restful/rest/net.go:97 +0x6c2
	repo.com/mercadolibre/meli-api/src/api/vendor/repo.com/mercadolibre/go-meli-toolkit/restful/rest.(*RequestBuilder).Get(0xc420172500, 0xc4208823a0, 0x1a, 0xc420882380)
	/Users/lgomez/go/src/repo.com/mercadolibre/meli-api/src/api/vendor/repo.com/mercadolibre/go-meli-toolkit/restful/rest/requestbuilder.go:129 +0x66
	repo.com/mercadolibre/meli-api/src/api/vendor/repo.com/mercadolibre/go-meli-toolkit/gokvsclient.kvsClient.Get.func1(0xbeb34d4a9f145838, 0x32a229b, 0x1bba3a0)
	/Users/lgomez/go/src/repo.com/mercadolibre/meli-api/src/api/vendor/repo.com/mercadolibre/go-meli-toolkit/gokvsclient/kvsclient.go:277 +0x10e
	repo.com/mercadolibre/meli-api/src/api/vendor/repo.com/mercadolibre/go-meli-toolkit/gokvsclient.recordGetTimeMetric(0xc42048ea30, 0xc420020120, 0xc420880000, 0xc42048ea40)
	/Users/lgomez/go/src/repo.com/mercadolibre/meli-api/src/api/vendor/repo.com/mercadolibre/go-meli-toolkit/gokvsclient/kvsmetrics.go:25 +0x61
	repo.com/mercadolibre/meli-api/src/api/vendor/repo.com/mercadolibre/go-meli-toolkit/gokvsclient.kvsClient.Get(0xc42021a0c4, 0xc, 0xc420882380, 0x19, 0xc42021eaa8, 0xc420878820, 0xc420036a80, 0x1057800)
	/Users/lgomez/go/src/repo.com/mercadolibre/meli-api/src/api/vendor/repo.com/mercadolibre/go-meli-toolkit/gokvsclient/kvsclient.go:274 +0x99
	repo.com/mercadolibre/meli-api/src/api/vendor/repo.com/mercadolibre/go-meli-toolkit/gokvsclient.kvsClientMock.Get(0xc42021a0c4, 0xc, 0xc420882380, 0x19, 0x2, 0x2, 0xc420882380, 0x19)
	/Users/lgomez/go/src/repo.com/mercadolibre/meli-api/src/api/vendor/repo.com/mercadolibre/go-meli-toolkit/gokvsclient/kvsclient_mock.go:36 +0x4d
	repo.com/mercadolibre/meli-api/src/api/vendor/repo.com/mercadolibre/go-meli-toolkit/gokvsclient.(*kvsClientMock).Get(0xc420048ef0, 0xc420882380, 0x19, 0xc420882380, 0x19, 0xc420882380, 0x19)
	<autogenerated>:1 +0x5d
	repo.com/mercadolibre/meli-api/src/api/dao.(*kvsContainer).getItem.func1()
	/Users/lgomez/go/src/repo.com/mercadolibre/meli-api/src/api/dao/dao.go:93 +0xa1
	repo.com/mercadolibre/meli-api/src/api/vendor/repo.com/mercadolibre/go-meli-toolkit/gorelic.WrapDatastoreSegment(0x17aa9d8, 0x3, 0x17ada1e, 0x7, 0x1b78440, 0xc42087f1c0, 0xc42048ed30)
	/Users/lgomez/go/src/repo.com/mercadolibre/meli-api/src/api/vendor/repo.com/mercadolibre/go-meli-toolkit/gorelic/gorelic.go:24 +0x122
	repo.com/mercadolibre/meli-api/src/api/dao.(*kvsContainer).getItem(0xc4200861a0, 0x1b753e0, 0xc42087b890, 0xc420882380, 0x19, 0x168f180, 0x0, 0xc4200a25a0, 0xc42017dfd0)
	/Users/lgomez/go/src/repo.com/mercadolibre/meli-api/src/api/dao/dao.go:92 +0x126
	repo.com/mercadolibre/meli-api/src/api/dao.(*kvsContainer).Get(0xc4200861a0, 0x1b753e0, 0xc42087b890, 0xc420882380, 0x19, 0x16e5a40, 0xc420340b40, 0x1013736, 0xc42048ee18)

* 

	/Users/lgomez/go/src/repo.com/mercadolibre/meli-api/src/api/dao/dao.go:47 +0x57
	repo.com/mercadolibre/meli-api/src/api/services.(*BusinessService).GetBusinessEntity(0xc4201cc148, 0x1b753e0, 0xc42087b890, 0xc42089e007, 0x3, 0xc42089e007, 0x3, 0xc420122de2, 0x8, 0xc420122dea, ...)
	/Users/lgomez/go/src/repo.com/mercadolibre/meli-api/src/api/services/route_coverage.go:22 +0x187
	repo.com/mercadolibre/meli-api/src/api/controllers.(*BusinessController).Get(0xc420766620, 0xc420090580)
	/Users/lgomez/go/src/repo.com/mercadolibre/meli-api/src/api/controllers/route_coverage_controller.go:53 +0x2d9
	repo.com/mercadolibre/meli-api/src/api/controllers.(*BusinessController).Get-fm(0xc420090580)
	/Users/lgomez/go/src/repo.com/mercadolibre/meli-api/src/api/server/url_mappings.go:20 +0x34
	repo.com/mercadolibre/meli-api/src/api/vendor/github.com/gin-gonic/gin.(*Context).Next(0xc420090580)
	/Users/lgomez/go/src/repo.com/mercadolibre/meli-api/src/api/vendor/github.com/gin-gonic/gin/context.go:110 +0x43
	repo.com/mercadolibre/meli-api/src/api/context.AccessLog(0xc420090580)
	/Users/lgomez/go/src/repo.com/mercadolibre/meli-api/src/api/context/middlewares.go:21 +0x43
	repo.com/mercadolibre/meli-api/src/api/vendor/github.com/gin-gonic/gin.(*Context).Next(0xc420090580)
	/Users/lgomez/go/src/repo.com/mercadolibre/meli-api/src/api/vendor/github.com/gin-gonic/gin/context.go:110 +0x43
	repo.com/mercadolibre/meli-api/src/api/vendor/github.com/gin-gonic/gin.LoggerWithWriter.func1(0xc420090580)
	/Users/lgomez/go/src/repo.com/mercadolibre/meli-api/src/api/vendor/github.com/gin-gonic/gin/logger.go:83 +0xcc
	repo.com/mercadolibre/meli-api/src/api/vendor/github.com/gin-gonic/gin.(*Context).Next(0xc420090580)
	/Users/lgomez/go/src/repo.com/mercadolibre/meli-api/src/api/vendor/github.com/gin-gonic/gin/context.go:110 +0x43
	repo.com/mercadolibre/meli-api/src/api/vendor/repo.com/mercadolibre/go-meli-toolkit/gingonic/mlhandlers.RecoveryWithWriter.func1(0xc420090580)
	/Users/lgomez/go/src/repo.com/mercadolibre/meli-api/src/api/vendor/repo.com/mercadolibre/go-meli-toolkit/gingonic/mlhandlers/recovery.go:46 +0x5a
	repo.com/mercadolibre/meli-api/src/api/vendor/github.com/gin-gonic/gin.(*Context).Next(0xc420090580)
	/Users/lgomez/go/src/repo.com/mercadolibre/meli-api/src/api/vendor/github.com/gin-gonic/gin/context.go:110 +0x43
	repo.com/mercadolibre/meli-api/src/api/vendor/repo.com/mercadolibre/go-meli-toolkit/gingonic/mlhandlers.CommonAPiFilter.func1(0xc420090580)
	/Users/lgomez/go/src/repo.com/mercadolibre/meli-api/src/api/vendor/repo.com/mercadolibre/go-meli-toolkit/gingonic/mlhandlers/commonapi.go:47 +0x158
	repo.com/mercadolibre/meli-api/src/api/vendor/github.com/gin-gonic/gin.(*Context).Next(0xc420090580)

* 

	/Users/lgomez/go/src/repo.com/mercadolibre/meli-api/src/api/vendor/github.com/gin-gonic/gin/context.go:110 +0x43
	repo.com/mercadolibre/meli-api/src/api/vendor/github.com/gin-gonic/gin.(*Engine).handleHTTPRequest(0xc4200a2240, 0xc420090580)
	/Users/lgomez/go/src/repo.com/mercadolibre/meli-api/src/api/vendor/github.com/gin-gonic/gin/gin.go:351 +0x5c5
	repo.com/mercadolibre/meli-api/src/api/vendor/github.com/gin-gonic/gin.(*Engine).ServeHTTP(0xc4200a2240, 0x1b745e0, 0xc42017efc0, 0xc42010a200)
	/Users/lgomez/go/src/repo.com/mercadolibre/meli-api/src/api/vendor/github.com/gin-gonic/gin/gin.go:318 +0x16b

Y eso es todo, incluso con la persistencia y el toolkit

* 

.image ./resources/bueno.jpeg _ 500

* Go vs Java - Go stacktrace (paths simplificados)

	runtime/debug.Stack(0xc420172500, 0xc42010a400, 0x0)
	/usr/local/go/src/runtime/debug/stack.go:24 +0xa7
	**PACKAGE**/src/api/**TOOLKIT**/restful/rest.(*RequestBuilder).doRequest(0xc420172500, 0x17aa8eb, 0x3, 0xc42089a120, 0x51, 0x0, 0x0, 0xc4201ce780)
	/Users/lgomez/go/src/**PACKAGE**/src/api/**TOOLKIT**/restful/rest/net.go:97 +0x6c2
	**PACKAGE**/src/api/**TOOLKIT**/restful/rest.(*RequestBuilder).Get(0xc420172500, 0xc4208823a0, 0x1a, 0xc420882380)
	/Users/lgomez/go/src/**PACKAGE**/src/api/**TOOLKIT**/restful/rest/requestbuilder.go:129 +0x66
	**PACKAGE**/src/api/**TOOLKIT**/gokvsclient.kvsClient.Get.func1(0xbeb34d4a9f145838, 0x32a229b, 0x1bba3a0)
	/Users/lgomez/go/src/**PACKAGE**/src/api/**TOOLKIT**/gokvsclient/kvsclient.go:277 +0x10e
	**PACKAGE**/src/api/**TOOLKIT**/gokvsclient.recordGetTimeMetric(0xc42048ea30, 0xc420020120, 0xc420880000, 0xc42048ea40)
	/Users/lgomez/go/src/**PACKAGE**/src/api/**TOOLKIT**/gokvsclient/kvsmetrics.go:25 +0x61
	**PACKAGE**/src/api/**TOOLKIT**/gokvsclient.kvsClient.Get(0xc42021a0c4, 0xc, 0xc420882380, 0x19, 0xc42021eaa8, 0xc420878820, 0xc420036a80, 0x1057800)
	/Users/lgomez/go/src/**PACKAGE**/src/api/**TOOLKIT**/gokvsclient/kvsclient.go:274 +0x99
	**PACKAGE**/src/api/**TOOLKIT**/gokvsclient.kvsClientMock.Get(0xc42021a0c4, 0xc, 0xc420882380, 0x19, 0x2, 0x2, 0xc420882380, 0x19)
	/Users/lgomez/go/src/**PACKAGE**/src/api/**TOOLKIT**/gokvsclient/kvsclient_mock.go:36 +0x4d
	**PACKAGE**/src/api/**TOOLKIT**/gokvsclient.(*kvsClientMock).Get(0xc420048ef0, 0xc420882380, 0x19, 0xc420882380, 0x19, 0xc420882380, 0x19)
	<autogenerated>:1 +0x5d
	**PACKAGE**/src/api/dao.(*kvsContainer).getItem.func1()
	/Users/lgomez/go/src/**PACKAGE**/src/api/dao/dao.go:93 +0xa1
	**PACKAGE**/src/api/**TOOLKIT**/gorelic.WrapDatastoreSegment(0x17aa9d8, 0x3, 0x17ada1e, 0x7, 0x1b78440, 0xc42087f1c0, 0xc42048ed30)
	/Users/lgomez/go/src/**PACKAGE**/src/api/**TOOLKIT**/gorelic/gorelic.go:24 +0x122
	**PACKAGE**/src/api/dao.(*kvsContainer).getItem(0xc4200861a0, 0x1b753e0, 0xc42087b890, 0xc420882380, 0x19, 0x168f180, 0x0, 0xc4200a25a0, 0xc42017dfd0)
	/Users/lgomez/go/src/**PACKAGE**/src/api/dao/dao.go:92 +0x126
	**PACKAGE**/src/api/dao.(*kvsContainer).Get(0xc4200861a0, 0x1b753e0, 0xc42087b890, 0xc420882380, 0x19, 0x16e5a40, 0xc420340b40, 0x1013736, 0xc42048ee18)

* 

	/Users/lgomez/go/src/**PACKAGE**/src/api/dao/dao.go:47 +0x57
	**PACKAGE**/src/api/services.(*BusinessService).GetBusinessEntity(0xc4201cc148, 0x1b753e0, 0xc42087b890, 0xc42089e007, 0x3, 0xc42089e007, 0x3, 0xc420122de2, 0x8, 0xc420122dea, ...)
	/Users/lgomez/go/src/**PACKAGE**/src/api/services/route_coverage.go:22 +0x187
	**PACKAGE**/src/api/controllers.(*BusinessController).Get(0xc420766620, 0xc420090580)
	/Users/lgomez/go/src/**PACKAGE**/src/api/controllers/route_coverage_controller.go:53 +0x2d9
	**PACKAGE**/src/api/controllers.(*BusinessController).Get-fm(0xc420090580)
	/Users/lgomez/go/src/**PACKAGE**/src/api/server/url_mappings.go:20 +0x34
	**PACKAGE**/src/api/vendor/github.com/gin-gonic/gin.(*Context).Next(0xc420090580)
	/Users/lgomez/go/src/**PACKAGE**/src/api/vendor/github.com/gin-gonic/gin/context.go:110 +0x43
	**PACKAGE**/src/api/context.AccessLog(0xc420090580)
	/Users/lgomez/go/src/**PACKAGE**/src/api/context/middlewares.go:21 +0x43
	**PACKAGE**/src/api/vendor/github.com/gin-gonic/gin.(*Context).Next(0xc420090580)
	/Users/lgomez/go/src/**PACKAGE**/src/api/vendor/github.com/gin-gonic/gin/context.go:110 +0x43
	**PACKAGE**/src/api/vendor/github.com/gin-gonic/gin.LoggerWithWriter.func1(0xc420090580)
	/Users/lgomez/go/src/**PACKAGE**/src/api/vendor/github.com/gin-gonic/gin/logger.go:83 +0xcc
	**PACKAGE**/src/api/vendor/github.com/gin-gonic/gin.(*Context).Next(0xc420090580)
	/Users/lgomez/go/src/**PACKAGE**/src/api/vendor/github.com/gin-gonic/gin/context.go:110 +0x43
	**PACKAGE**/src/api/**TOOLKIT**/gingonic/mlhandlers.RecoveryWithWriter.func1(0xc420090580)
	/Users/lgomez/go/src/**PACKAGE**/src/api/**TOOLKIT**/gingonic/mlhandlers/recovery.go:46 +0x5a
	**PACKAGE**/src/api/vendor/github.com/gin-gonic/gin.(*Context).Next(0xc420090580)
	/Users/lgomez/go/src/**PACKAGE**/src/api/vendor/github.com/gin-gonic/gin/context.go:110 +0x43
	**PACKAGE**/src/api/**TOOLKIT**/gingonic/mlhandlers.CommonAPiFilter.func1(0xc420090580)
	/Users/lgomez/go/src/**PACKAGE**/src/api/**TOOLKIT**/gingonic/mlhandlers/commonapi.go:47 +0x158
	**PACKAGE**/src/api/vendor/github.com/gin-gonic/gin.(*Context).Next(0xc420090580)

* 

	/Users/lgomez/go/src/**PACKAGE**/src/api/vendor/github.com/gin-gonic/gin/context.go:110 +0x43
	**PACKAGE**/src/api/vendor/github.com/gin-gonic/gin.(*Engine).handleHTTPRequest(0xc4200a2240, 0xc420090580)
	/Users/lgomez/go/src/**PACKAGE**/src/api/vendor/github.com/gin-gonic/gin/gin.go:351 +0x5c5
	**PACKAGE**/src/api/vendor/github.com/gin-gonic/gin.(*Engine).ServeHTTP(0xc4200a2240, 0x1b745e0, 0xc42017efc0, 0xc42010a200)
	/Users/lgomez/go/src/**PACKAGE**/src/api/vendor/github.com/gin-gonic/gin/gin.go:318 +0x16b

* Go vs Grails - Concluyendo

Momento, las APIs y call sites son distintos!

.image ./resources/chicken.jpg _ 300

*Efectivamente,* *aunque...*
- ...la devirtualización en Go es en tiempo de compilación para casos conocidos; un diseño similar al de la API de Grails sumaría pocos stack frames aplicativos
- ...la mayor parte del overhead proviene de Gin, por lo cual el conteo de stack frames extra en código de servicios puro sería 1:1

Go es más simple, y a veces *menos* *es* *más*

* To Go or not to Go

Al final del día, se reduce a (intentar) seguir la máxima _"The_ _right_ _tool_ _for_ _the_ _right_ _job"_
Para nosotros en MeLi...

* To Go or not to Go: Go

*Go* *es* *nuestra* *opción* *preferida* *para:*
- APIs core: Poca lógica de negocio, mucho throughput (MRPM)
- Microservicios: Multitenancia sobre nuestro storage key-value
- Caches: Bajo overhead de memoria permite caches locales masivas
- Yapa: Bajo nivel (middlewares tengine con CGo)

.image ./resources/logo_golang.jpg _ 200

* To Go or not to Go: Java

*Consideramos* *Java* *en* *lugar* *de* *Go* *para:*
- Extensibilidad y tuneo de librerías/productos ya basados en Java (Hystrix, Cassandra, Elasticsearch, etc)
- Ciertos middle-ends y orquestadores
- Migraciones desde Grails (un poco) menos sufridas

.image ./resources/logo_java.png _ 200

* To Go or not to Go: Groovy/Grails

*Consideramos* *Grails* *en* *lugar* *de* *Java/Go* *para:*
- Nada (Disclaimer: al autor no le gusta Groovy)

.image ./resources/logo_groovy.jpg _ 300

Hablando más en serio: APIs que se beneficien del autowiring mágico de Grails (DAOs sobre Oracle/MySQL)

* Tooling e IDEs

.image ./resources/gopherswrench.jpg _ 700

* Tooling e IDEs: Toolchain oficial

Go provee un extenso juego de herramientas CLI oficial para trabajar con nuestros proyectos

Las herramientas base parten del comando _go_ e incluye las siguientes:

	build       compile packages and dependencies
	clean       remove object files and cached files
	doc         show documentation for package or symbol
	env         print Go environment information
	bug         start a bug report
	fix         update packages to use new APIs
	fmt         gofmt (reformat) package sources
	generate    generate Go files by processing source
	get         download and install packages and dependencies
	install     compile and install packages and dependencies
	list        list packages
	run         compile and run Go program
	test        test packages
	tool        run specified go tool
	version     print Go version
	vet         report likely mistakes in packages

* Tooling e IDEs: Toolchain oficial

Otras herramientas y packages oficiales disponibles pero no incluidas en _go_ son:

- [[https://github.com/google/pprof][Pprof]]: Profiler para aplicaciones go
- [[https://godoc.org/golang.org/x/tools/present][Present]]: Parser/renderer de presentaciones
- [[https://godoc.org/golang.org/x/tools/refactor][Refactor]]: Refactor de packages desde CLI
- [[https://godoc.org/golang.org/x/tools/playground][Playground]]: Wrapper/proxy de go playground
- [[https://godoc.org/golang.org/x/tools/imports][Imports]]: Manipulación de imports
- [[https://godoc.org/golang.org/x/tools/go][Go]]: Componentes del compilador de Go

Pueden ver la lista completa en:

- CLIs: [[https://godoc.org/golang.org/x/tools/cmd][https://godoc.org/golang.org/x/tools/cmd]] 
- Packages: [[https://godoc.org/golang.org/x/tools][https://godoc.org/golang.org/x/tools]]

* Tooling e IDEs: Principales herramientas para desarrollo

*Plugins*
- [[https://github.com/joefitzgerald/go-plus][Atom: go-plus]]
- [[https://goclipse.github.io][Eclipse]]
- [[https://plugins.jetbrains.com/plugin/?id=5047][IntelliJ]]
- [[https://github.com/fatih/vim-go][Vim: vim-go]]
- [[https://github.com/DisposaBoy/GoSublime][Sublime: go-sublime]]
- [[https://github.com/Microsoft/vscode-go][Visual Studio Code: vscode-go]]

*IDEs* *standalone*
- [[https://www.jetbrains.com/go/][Goland - IntelliJ versión Go]]
- [[https://github.com/visualfc/liteide][Lite IDE]]

El Boca-River en MeLi es entre Visual Studio Code e IntelliJ (ambas son opciones muy sólidas)

Para una lista más exhaustiva ver [[https://github.com/golang/go/wiki/IDEsAndTextEditorPlugins][la wiki de Go]]

* Tooling e IDEs: Debuggers

Actualmente tenemos 2 alternativas (y un difunto):

- Delve
- GDB
- Godebug - deprecado

* Tooling e IDEs: Debuggers - Delve
[[https://github.com/derekparker/delve][https://github.com/derekparker/delve]]

Es el estándar defacto y sucesor de [[https://github.com/mailgun/godebug][godebug]]

Como debugger, es bastante completo y posee varios frontends:

- [[https://github.com/derekparker/delve/tree/master/Documentation/cli][dlv]]: Es el frontend CLI oficial que viene incluído con delve 
- [[https://github.com/aarzilli/gdlv][gdlv]]: Frontend gráfico

Delve expone una [[https://godoc.org/github.com/derekparker/delve/service/rpc2][API JsonRPC]] con la cual se puede interactuar para implementar nuevos frontends e integraciones

*Plus*: Integraciones con las principales herramientas (IntelliJ/Goland, VS Code)

* Tooling e IDEs: Debuggers - GDB

Hay soporte limitado para usar GDB con Go, aunque sin embargo es posible (considerando que no haya otra opción disponible)

Pueden consultar la guía oficial en [[https://golang.org/doc/gdb][https://golang.org/doc/gdb]]

* Un día de trabajo

.image ./resources/monkeys.jpg _ 700

* Un día de trabajo: Las bases

- Github + gitflow: [[http://nvie.com/posts/a-successful-git-branching-model/][http://nvie.com/posts/a-successful-git-branching-model/]]
- Deploys periódicos & hotfix. Algunos repos puntuales siguen deploys on-demand
- Scrum laxo, no bikeshedding ni burocracia
- Los devs también podemos hacer producto

.image ./resources/simpworks.jpg _ 600

* Un día de trabajo: La salsa secreta

Dentro de MeLi tenemos nuestra solución in-house para DevOps automatizado, *Fury*,
que nos simplifica el proceso de desarrollo

.image ./resources/fury.png _ 400

- Deploys (all-in, canary, blue-green, rolling)
- Versionado y entregables
- Métricas, diagnóstico, logs
- Infrastructure as a service (IaaS)

* Un día de trabajo: Capando monos en Go

- *Desarrollo*: PRs chicos, no reinventar la rueda y consumir los toolkits. No implementar como si estuviésemos en Java

- *Testing*: Buscamos cobertura > 80%. Go nos enseña a no sobrediseñar. Divisiones aplicativas pequeñas y concisas = mejor capacidad de cobertura y mocking. Aprovechamos el concepto de "los clientes definen interfaces" gracias al duck typing

- *Entorno*: Fury ❤ Docker. Una imagen promedio de Go solamente necesita el sdk/runtime y variables de etorno (en caso de ser necesario)

- *Dependencias*: Usar vendoring nos asegura builds reproducibles y rápidos, a falta de un versionado estandar nativo en Go (aunque están [[https://research.swtch.com/vgo][trabajando en eso]]). Nuestro gestor preferido es [[https://github.com/golang/dep][Dep]], el oficial

- *Troubleshooting*: Al ser más minimalista que Java y Groovy, Go puede carecer de cierta flexibilidad en cuanto a formas de instumentar diagnósticos. Métricas y logs son nuestros amigos

* Resultados

.image ./resources/comp1.png _ 1000

* Resultados

.image ./resources/comp2.png _ 1000

* Resultados

.image ./resources/comp3.png _ 1000

* Preguntas?

.image ./resources/questions.png _ 700
