Go Dep

Intro, hype y migración desde govendor

Luis Gabriel Gómez

* 

.image ./resources/DigbyShadows.png _ 500

* ¿Que es Go Dep?

- Go dep es el prototipo oficial de gestor de dependencias para golang 
- Comenzó como un proyecto open source de un tercero hasta que ganó tracción y la consecuente adopción como candidato a solución oficial por parte del equipo de go
- Todavía se lo considera en fase experimental pero está lo suficientemente estable como para usarlo en producción

[[https://github.com/golang/dep][Github repo]]

* Motivación: Migracion de govendor

Govendor es una solución bastante usada (y el estándar defacto en meli). Sin embargo, tiene las siguientes falencias:

- Soporta versionado y branching pero solo a la hora de agregar dependencias (`fetch`)
- El índice de dependencias *vendor.json* solo maneja hashes de commits (`revision`)
- Las dependencias se multiplican por la cantidad de subpackages que usemos (ej: gin, gin/binding, gin/render)

* Features (comparado a govendor)

- Soporte de migración desde otras herramientas de vendoring (en nuestro caso nos interesa go vendor)
- Soporte nativo de semver para dependencias, con posiblidad de establecer rangos
- Indexado de dependencias deduplicadas, agrupadas por subpackages
- Soporte de constraints para resolver versiones puntuales
- Archivos de configuración en formato toml (dialecto de yaml), más amistoso que json plano

* Tips pre-migración

- Si la migración va de la mano con una actualizacion de dependencias, mucho mejor
- La migración puede causar inadvertidamente problemas en nuestras dependencias existentes. Si no es completamente necesario conservar las versiones de dependencias actuales, borramos los fuentes de /vendor

* Migrando

- 1. Instalar go dep (`brew`install`dep`&&`brew`upgrade`dep`)
- 2. Ir al root de nuestro proyecto
- 3. Inicializar dep (`dep`init`)

Dep automaticamente procesa los imports del proyecto e indexa las dependencias buscando las versiones compatibles más recientes. Si no se borra el directorio vendor antiguo, va a intentar inferir las depdencias de nuestro *vendor.json*, y renombrar el directorio antiguo para backup

* Migrando (cont.)

Al final, vamos a tener nuestro directorio vendor con las dependencias y 2 archivos:

- *Gopkg.toml*: Contiene los constraints (especificaciones de versión) y otros metadatos opcionales
- *Gopkg.lock*: Es el índice de nuestras dependencias, autogenerado

Si la dependencia no tiene constraints, va a buscar por defecto el último commit del branch master (o versión, si el proyecto tiene releases)

* Tips post-migración

- Si optamos por migrar, verificar el estado actual de las dependencias (`clean`&`build`-a`). Si hay problemas, borrar todos los fuentes y restaurarlos mediante `dep`ensure`
- Se pueden congelar las dependencias agregando las versiones encontradas en *Gopkg.lock* como constraints en *Gopkg.toml*. Si deseamos congelar todo, esto implica pasar todas las entradas del archivo lock al toml principal
- Implementar releases de github con *versionado*semver* ayuda a un mejor mantenimiento de dependencias, y dep nos permite aprovechar esto (*muy* útil para nuestros frameworks o toolkits)

* Antes (vendor.json)

.image ./resources/before.png _ _

* Después (Gopkg.toml)

.image ./resources/after1.png _ _

* Después (Gopkg.lock)

.image ./resources/after2.png _ _
